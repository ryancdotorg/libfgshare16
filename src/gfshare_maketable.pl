#!/usr/bin/perl -w
use strict;

# This file is:
# Copyright Daniel Silverstone <dsilvers@digital-scurf.org> 2006
# Copyright Simon McVittie <smcv pseudorandom co uk> 2006
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

my @logs;
my @exps;


my $F_SZ = $ARGV[0] || 65536;
my $LMAX = $F_SZ - 2;
my $EMAX = $F_SZ - 1;

#my $v = 0x100b;
my %poly = (
    256 =>   0x1d,
   4096 =>  0x053,
  65536 => 0x100b,
);
my $v = $poly{$F_SZ};

my $type;
if ($F_SZ <= 256) {
  $type = 'unsigned char';
} elsif ($F_SZ <= 65536) {
  $type = 'unsigned short';
} else {
  $type = 'unsigned long';
}

while ($v < $F_SZ) {
  @logs = (0)x($LMAX+1);
  @exps = (0)x($EMAX+1);
  my $x = 1;
  foreach my $i (0..$LMAX) {
    $exps[$i] = $x;
    $logs[$x] = $i;
    $x *= 2; # aka left shift by one
    $x ^= ($F_SZ + $v) if ($x & $F_SZ); # Unset the 8th bit and mix in 0x1d
  }
  $logs[0] = 0;

  my $okay = 1;
  foreach my $i (0..$LMAX) {
    unless ($logs[$exps[$i]] == $i) {
      #warn "bad data \$logs[\$exps[$i]] == $logs[$exps[$i]]";
      $okay = 0;
    }
  }
  foreach my $i (1..$EMAX) {
    unless ($exps[$logs[$i]] == $i) {
      #warn "bad data \$exps[\$logs[$i]] == $exps[$logs[$i]]";
      $okay = 0;
    }
  }
  last if ($okay);
  $v += 2;
}


print("
/*
 * This file is autogenerated by gfshare_maketable.pl
 */

/* v = $v */

static $type logs[$F_SZ] = {\n  ");

foreach my $i (0..$EMAX) {
  printf("0x%04x", $logs[$i]);
  if ($i == ($LMAX + 1)) {
    print("\n};\n");
  } elsif ($i % 8 == 7) {
    printf(", /* 0x%04x-0x%04x */\n  ", $i-7, $i);
  } else {
    print(", ");
  }
}

print("
static $type exps[".($EMAX*2)."] = {\n  ");
foreach my $i (0..($EMAX * 2 - 1)) {
  printf("0x%04x", $exps[$i % $EMAX]); # $exps[$EMAX]==$exps[0]
  if ($i == ($EMAX * 2 - 1)) {
    print("\n};\n");
  } elsif ($i % 8 == 7) {
    printf(", /* 0x%04x-0x%04x */\n  ", $i-7, $i);
  } else {
    print(", ");
  }
}

